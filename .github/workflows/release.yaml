name: main

on:
  push:
    branches:
      - 'main'
    tags:
      - '[0-9]+.[0-9]+.[0-9]+*'
  pull_request:

env:
  PIP_CACHE_DIR: ~/.cache/pip
  RUST_CACHE_DIRS: "~/.cargo/registry\n~/.cargo/git\ntarget\n"
  LIBCLANG_PATH_WIN: "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Tools/Llvm/x64/bin"
  CARGO_MAKE_VERSION: 0.35.0
  MINICONDA_VERSION: "py38_4.10.3"

jobs:

  build:

    name: Build Binaries

    strategy:
      matrix:
        os:
          - windows-2019

    runs-on: ${{ matrix.os }}

    steps:

      - name: Checkout source
        uses: actions/checkout@v2
        with:
          submodules: recursive
          ssh-key: ${{ secrets.SSH_KEY }}
          ssh-strict: false

      - uses: webfactory/ssh-agent@v0.5.0
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      - name: Run ssh-keyscan
        run: ssh-keyscan github.com >> ~/.ssh/known_hosts

      - name: Setup SSH for Windows Git LFS
        run: |
          & "C:\\Program Files\\Git\\bin\\sh.exe" -c "ssh-keyscan github.com >> ~/.ssh/known_hosts"
          & "C:\\Program Files\\Git\\bin\\sh.exe" -c "echo '${{ secrets.SSH_KEY }}' >> ~/.ssh/id_rsa"
        if: matrix.os == 'windows-2019'

      - uses: actions/setup-python@v2
        with:
          python-version: '3.5'
          architecture: 'x86' # optional x64 or x86. Defaults to x64 if not specified

      - name: Cache pip
        uses: actions/cache@v2
        with:
          path: ${{ env.PIP_CACHE_DIR }}
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt', 'requirements_dev.txt', 'requirements_gui.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            ${{ runner.os }}-
      - name: Run Pip Install Requirements
        run: |
          pip install -r requirements.txt

      - name: Run Pip Install Requirements Dev
        run: |
          pip install -r requirements_dev.txt

      - name: Run Pip Install Requirements Gui
        run: |
          pip install -r requirements_gui.txt

      - name: Build Release
        run: |
          python scripts/build_release.py
      # - name: Build ${{ runner.os }} Binaries.
      #   env:
      #     LIBCLANG_PATH: ${{ env.LIBCLANG_PATH_WIN }}
      #   run: |
      #     cargo make prod-installer
      #   if: matrix.os == 'windows-2019'

      # - name: Build ${{ runner.os }} Binaries.
      #   shell: bash
      #   run: |
      #     cargo make prod-installer
      #   if: matrix.os != 'windows-2019'

      # - name: Pull Git LFS objects
      #   run: git lfs pull
      #   env:
      #     GIT_SSH_COMMAND: ssh -o StrictHostKeyChecking=no
      # - name: Zip ${{ runner.os }} Binaries.
      #   env:
      #     OS_NAME: ${{ runner.os }}
      #   shell: bash
      #   run: |
      #     bash ./.github/ci-build.sh
      #     echo "RELEASE_ARCHIVE=$(cat release-archive.filename)" >>$GITHUB_ENV
      #     echo "BENCH_ARCHIVE=$(cat bench.filename)" >>$GITHUB_ENV
      # - name: ${{ runner.os }} Installer Size Benchmark.
      #   env:
      #     OS_NAME: ${{ runner.os }}
      #   shell: bash
      #   run: |
      #     cargo make disk-usage-bench
      # - uses: actions/upload-artifact@v2
      #   with:
      #     name: ${{ runner.os }}-artifacts
      #     path: |
      #       ${{ env.RELEASE_ARCHIVE }}
      #       release-archive.filename
      # - uses: actions/upload-artifact@v2
      #   with:
      #     name: ${{ runner.os }}-artifacts-bench
      #     path: |
      #       ${{ env.BENCH_ARCHIVE }}
      #       bench.filename
  
  # release:
  #   name: Create Release
  #   needs:
  #     - frontend_bench
  #   if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
  #   runs-on: ubuntu-20.04
  #   steps:
  #     - name: Store git tag and date vars.
  #       run: |
  #         DATE="$(date '+%Y-%m-%d')";
  #         echo "DATE=${DATE}" >> $GITHUB_ENV
  #         echo "VERSION=${GITHUB_REF##*/}" >> $GITHUB_ENV
  #     - name: Pull Windows Artifacts
  #       uses: actions/download-artifact@v2
  #       with:
  #         name: Windows-artifacts
  #         path: |
  #           windows
  #     - name: Pull Linux Artifacts
  #       uses: actions/download-artifact@v2
  #       with:
  #         name: Linux-artifacts
  #         path: |
  #           linux
  #     - name: Pull macOS Artifacts
  #       uses: actions/download-artifact@v2
  #       with:
  #         name: macOS-artifacts
  #         path: |
  #           macos
  #     - name: Store Env Vars
  #       shell: bash
  #       run: |
  #         echo "WINDOWS_ARCHIVE=$(cat windows/release-archive.filename)" >>$GITHUB_ENV
  #         echo "LINUX_ARCHIVE=$(cat linux/release-archive.filename)" >>$GITHUB_ENV
  #         echo "MACOS_ARCHIVE=$(cat macos/release-archive.filename)" >>$GITHUB_ENV
  #     - name: Release
  #       uses: softprops/action-gh-release@v1
  #       with:
  #         name: "${{ env.VERSION }}-${{ env.DATE }}"
  #         files: |
  #           windows/${{ env.WINDOWS_ARCHIVE }}
  #           linux/${{ env.LINUX_ARCHIVE }}
  #           macos/${{ env.MACOS_ARCHIVE }}
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
